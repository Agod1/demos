"apiVersion": |-
  argoproj.io/v1alpha1
"kind": |-
  Workflow
"metadata":
  "annotations":
    "pipelines.kubeflow.org/pipeline_spec": |-
      {"description": "Shows how to use mlrun/kfp.", "inputs": [{"default": "[0.1, 0.2]", "name": "learning_rate"}, {"default": "[30, 31]", "name": "num_leaves"}], "name": "LGBMClassifier training pipeline"}
  "generateName": |-
    lgbmclassifier-training-pipeline-
"spec":
  "arguments":
    "parameters":
    - "name": |-
        learning_rate
      "value": |-
        [0.1, 0.2]
    - "name": |-
        num_leaves
      "value": |-
        [30, 31]
  "entrypoint": |-
    lgbmclassifier-training-pipeline
  "serviceAccountName": |-
    pipeline-runner
  "templates":
  - "container":
      "command":
      - |-
        python
      - |-
        -m
      - |-
        mlrun
      - |-
        deploy
      - |-
        {'kind': 'remote', 'metadata': {'name': 'higgs-serving'}, 'spec': {'command': '', 'args': [], 'image': '', 'mode': '', 'description': '', 'volumes': [{'volume': {'flexVolume': {'driver': 'v3io/fuse', 'options': {'accessKey': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d', 'container': 'users', 'subPath': '/admin'}}, 'name': 'fs'}, 'volumeMount': {'name': 'fs', 'mountPath': 'User'}}], 'env': {'TRANSPORT_PROTOCOL': 'seldon', 'ENABLE_EXPLAINER': 'False', 'MODEL_CLASS': 'LGBoostModel', 'V3IO_FRAMESD': 'framesd.default-tenant.svc:8080', 'V3IO_USERNAME': 'admin', 'V3IO_ACCESS_KEY': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d', 'V3IO_API': 'v3io-webapi.default-tenant.svc:8081'}, 'config': {'spec.triggers.http': {'kind': 'http', 'maxWorkers': 8, 'attributes': {'ingresses': {}}, 'annotations': {}}}, 'build_commands': [], 'base_spec': {'apiVersion': 'nuclio.io/v1', 'kind': 'Function', 'metadata': {'annotations': {'nuclio.io/generated_by': 'function generated at 15-12-2019 by admin from model-server.ipynb'}, 'labels': {}, 'name': 'model-server'}, 'spec': {'build': {'commands': ['pip install kfserving==0.2.0 --upgrade', 'pip install azure', 'pip install numpy lightgbm joblib'], 'functionSourceCode': '', 'noBaseImagesPull': True}, 'env': [], 'handler': 'model-server:handler', 'runtime': 'python:3.6', 'volumes': []}}, 'source': '', 'function_kind': 'serving'}}
      - |-
        -s
      - ""
      - |-
        -p
      - |-
        refactor-demos
      - |-
        -m
      - |-
        lgbm_v5_joblib={{inputs.parameters.train-model-model}}
      "image": |-
        mlrun/mlrun:latest
    "inputs":
      "parameters":
      - "name": |-
          train-model-model
    "name": |-
      deploy-higgs-serving
    "outputs":
      "artifacts":
      - "name": |-
          deploy-higgs-serving-endpoint
        "path": |-
          /tmp/output
  - "dag":
      "tasks":
      - "arguments":
          "parameters":
          - "name": |-
              train-model-model
            "value": |-
              {{tasks.train-model.outputs.parameters.train-model-model}}
        "dependencies":
        - |-
          train-model
        "name": |-
          deploy-higgs-serving
        "template": |-
          deploy-higgs-serving
      - "name": |-
          load-sample-preprocess-data
        "template": |-
          load-sample-preprocess-data
      - "arguments":
          "parameters":
          - "name": |-
              learning_rate
            "value": |-
              {{inputs.parameters.learning_rate}}
          - "name": |-
              load-sample-preprocess-data-xtest
            "value": |-
              {{tasks.load-sample-preprocess-data.outputs.parameters.load-sample-preprocess-data-xtest}}
          - "name": |-
              load-sample-preprocess-data-ytest
            "value": |-
              {{tasks.load-sample-preprocess-data.outputs.parameters.load-sample-preprocess-data-ytest}}
          - "name": |-
              num_leaves
            "value": |-
              {{inputs.parameters.num_leaves}}
          - "name": |-
              train-model-model
            "value": |-
              {{tasks.train-model.outputs.parameters.train-model-model}}
        "dependencies":
        - |-
          load-sample-preprocess-data
        - |-
          train-model
        "name": |-
          test-model
        "template": |-
          test-model
      - "arguments":
          "parameters":
          - "name": |-
              load-sample-preprocess-data-xtrain
            "value": |-
              {{tasks.load-sample-preprocess-data.outputs.parameters.load-sample-preprocess-data-xtrain}}
          - "name": |-
              load-sample-preprocess-data-xvalid
            "value": |-
              {{tasks.load-sample-preprocess-data.outputs.parameters.load-sample-preprocess-data-xvalid}}
          - "name": |-
              load-sample-preprocess-data-ytrain
            "value": |-
              {{tasks.load-sample-preprocess-data.outputs.parameters.load-sample-preprocess-data-ytrain}}
          - "name": |-
              load-sample-preprocess-data-yvalid
            "value": |-
              {{tasks.load-sample-preprocess-data.outputs.parameters.load-sample-preprocess-data-yvalid}}
        "dependencies":
        - |-
          load-sample-preprocess-data
        "name": |-
          train-model
        "template": |-
          train-model
    "inputs":
      "parameters":
      - "name": |-
          learning_rate
      - "name": |-
          num_leaves
    "name": |-
      lgbmclassifier-training-pipeline
  - "container":
      "command":
      - |-
        python
      - |-
        -m
      - |-
        mlrun
      - |-
        run
      - |-
        --kfp
      - |-
        --from-env
      - |-
        --workflow
      - |-
        {{workflow.uid}}
      - |-
        --name
      - |-
        load_sample_preprocess_data
      - |-
        -p
      - |-
        sample=-2000
      - |-
        -p
      - |-
        target=/User/projects/lightgbm/data/raw
      - |-
        -p
      - |-
        splits=[0.9, 0.1]
      - |-
        -p
      - |-
        random_state=1
      - |-
        -o
      - |-
        xtrain
      - |-
        -o
      - |-
        ytrain
      - |-
        -o
      - |-
        xvalid
      - |-
        -o
      - |-
        yvalid
      - |-
        -o
      - |-
        xtest
      - |-
        -o
      - |-
        ytest
      - |-
        --handler
      - |-
        load
      - |-
        --runtime
      - |-
        {'kind': 'job', 'metadata': {'name': 'kubeflow-pipeline'}, 'spec': {'command': '', 'args': [], 'image': 'docker-registry.default-tenant.app.yjb-3.iguazio-cd2.com:80/mlrun/mlrunlgb:latest', 'mode': '', 'volumes': [{'flexVolume': {'driver': 'v3io/fuse', 'options': {'accessKey': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d', 'container': 'users', 'subPath': '/admin'}}, 'name': 'v3io'}], 'volume_mounts': [{'mountPath': '/User', 'name': 'v3io'}], 'env': [{'name': 'V3IO_API', 'value': 'v3io-webapi.default-tenant.svc:8081'}, {'name': 'V3IO_USERNAME', 'value': 'admin'}, {'name': 'V3IO_ACCESS_KEY', 'value': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d'}], 'description': '', 'build': {'functionSourceCode': '', 'image': 'mlrun/mlrunlgb:latest', 'base_image': 'python:3.6-jessie', 'commands': ['pip install -U matplotlib sklearn lightgbm kfp joblib pyarrow', 'pip install mlrun']}}}
      - |-
        --out-path
      - |-
        /User/projects/lightgbm/data
      - ""
      "env":
      - "name": |-
          MLRUN_DBPATH
        "value": |-
          /User/mlrun
      - "name": |-
          V3IO_API
        "value": |-
          v3io-webapi.default-tenant.svc:8081
      - "name": |-
          V3IO_USERNAME
        "value": |-
          admin
      - "name": |-
          V3IO_ACCESS_KEY
        "value": |-
          4a5eabdc-0814-489e-9fdf-6ad2fa5df31d
      "image": |-
        mlrun/mlrun:latest
      "volumeMounts":
      - "mountPath": |-
          /User
        "name": |-
          v3io
    "name": |-
      load-sample-preprocess-data
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          mlpipeline-metrics
        "path": |-
          /mlpipeline-metrics.json
      - "name": |-
          load-sample-preprocess-data-xtest
        "path": |-
          /tmp/xtest
      - "name": |-
          load-sample-preprocess-data-xtrain
        "path": |-
          /tmp/xtrain
      - "name": |-
          load-sample-preprocess-data-xvalid
        "path": |-
          /tmp/xvalid
      - "name": |-
          load-sample-preprocess-data-ytest
        "path": |-
          /tmp/ytest
      - "name": |-
          load-sample-preprocess-data-ytrain
        "path": |-
          /tmp/ytrain
      - "name": |-
          load-sample-preprocess-data-yvalid
        "path": |-
          /tmp/yvalid
      "parameters":
      - "name": |-
          load-sample-preprocess-data-xtest
        "valueFrom":
          "path": |-
            /tmp/xtest
      - "name": |-
          load-sample-preprocess-data-xtrain
        "valueFrom":
          "path": |-
            /tmp/xtrain
      - "name": |-
          load-sample-preprocess-data-xvalid
        "valueFrom":
          "path": |-
            /tmp/xvalid
      - "name": |-
          load-sample-preprocess-data-ytest
        "valueFrom":
          "path": |-
            /tmp/ytest
      - "name": |-
          load-sample-preprocess-data-ytrain
        "valueFrom":
          "path": |-
            /tmp/ytrain
      - "name": |-
          load-sample-preprocess-data-yvalid
        "valueFrom":
          "path": |-
            /tmp/yvalid
    "volumes":
    - "flexVolume":
        "driver": |-
          v3io/fuse
        "options":
          "accessKey": |-
            4a5eabdc-0814-489e-9fdf-6ad2fa5df31d
          "container": |-
            users
          "subPath": |-
            /admin
      "name": |-
        v3io
  - "container":
      "command":
      - |-
        python
      - |-
        -m
      - |-
        mlrun
      - |-
        run
      - |-
        --kfp
      - |-
        --from-env
      - |-
        --workflow
      - |-
        {{workflow.uid}}
      - |-
        --name
      - |-
        test_model
      - |-
        -p
      - |-
        model_name=lightgbm.model.pickle
      - |-
        -x
      - |-
        learning_rate={{inputs.parameters.learning_rate}}
      - |-
        -x
      - |-
        num_leaves={{inputs.parameters.num_leaves}}
      - |-
        -i
      - |-
        model={{inputs.parameters.train-model-model}}
      - |-
        -i
      - |-
        xtest={{inputs.parameters.load-sample-preprocess-data-xtest}}
      - |-
        -i
      - |-
        ytest={{inputs.parameters.load-sample-preprocess-data-ytest}}
      - |-
        -o
      - |-
        iteration_results
      - |-
        --handler
      - |-
        test
      - |-
        --runtime
      - |-
        {'kind': 'job', 'metadata': {'name': 'kubeflow-pipeline'}, 'spec': {'command': '', 'args': [], 'image': 'docker-registry.default-tenant.app.yjb-3.iguazio-cd2.com:80/mlrun/mlrunlgb:latest', 'mode': '', 'volumes': [{'flexVolume': {'driver': 'v3io/fuse', 'options': {'accessKey': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d', 'container': 'users', 'subPath': '/admin'}}, 'name': 'v3io'}], 'volume_mounts': [{'mountPath': '/User', 'name': 'v3io'}], 'env': [{'name': 'V3IO_API', 'value': 'v3io-webapi.default-tenant.svc:8081'}, {'name': 'V3IO_USERNAME', 'value': 'admin'}, {'name': 'V3IO_ACCESS_KEY', 'value': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d'}], 'description': '', 'build': {'functionSourceCode': '', 'image': 'mlrun/mlrunlgb:latest', 'base_image': 'python:3.6-jessie', 'commands': ['pip install -U matplotlib sklearn lightgbm kfp joblib pyarrow', 'pip install mlrun']}}}
      - |-
        --out-path
      - |-
        /User/projects/lightgbm/results
      - |-
        --selector
      - |-
        max.accuracy
      - ""
      "env":
      - "name": |-
          MLRUN_DBPATH
        "value": |-
          /User/mlrun
      - "name": |-
          V3IO_API
        "value": |-
          v3io-webapi.default-tenant.svc:8081
      - "name": |-
          V3IO_USERNAME
        "value": |-
          admin
      - "name": |-
          V3IO_ACCESS_KEY
        "value": |-
          4a5eabdc-0814-489e-9fdf-6ad2fa5df31d
      "image": |-
        mlrun/mlrun:latest
      "volumeMounts":
      - "mountPath": |-
          /User
        "name": |-
          v3io
    "inputs":
      "parameters":
      - "name": |-
          learning_rate
      - "name": |-
          load-sample-preprocess-data-xtest
      - "name": |-
          load-sample-preprocess-data-ytest
      - "name": |-
          num_leaves
      - "name": |-
          train-model-model
    "name": |-
      test-model
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          mlpipeline-metrics
        "path": |-
          /mlpipeline-metrics.json
      - "name": |-
          test-model-iteration_results
        "path": |-
          /tmp/iteration_results
    "volumes":
    - "flexVolume":
        "driver": |-
          v3io/fuse
        "options":
          "accessKey": |-
            4a5eabdc-0814-489e-9fdf-6ad2fa5df31d
          "container": |-
            users
          "subPath": |-
            /admin
      "name": |-
        v3io
  - "container":
      "command":
      - |-
        python
      - |-
        -m
      - |-
        mlrun
      - |-
        run
      - |-
        --kfp
      - |-
        --from-env
      - |-
        --workflow
      - |-
        {{workflow.uid}}
      - |-
        --name
      - |-
        train_model
      - |-
        -p
      - |-
        model_target=/User/projects/lightgbm/models
      - |-
        -p
      - |-
        model_name=lightgbm.model.pickle
      - |-
        -i
      - |-
        xtrain={{inputs.parameters.load-sample-preprocess-data-xtrain}}
      - |-
        -i
      - |-
        ytrain={{inputs.parameters.load-sample-preprocess-data-ytrain}}
      - |-
        -i
      - |-
        xvalid={{inputs.parameters.load-sample-preprocess-data-xvalid}}
      - |-
        -i
      - |-
        yvalid={{inputs.parameters.load-sample-preprocess-data-yvalid}}
      - |-
        -o
      - |-
        model
      - |-
        --handler
      - |-
        train
      - |-
        --runtime
      - |-
        {'kind': 'job', 'metadata': {'name': 'kubeflow-pipeline'}, 'spec': {'command': '', 'args': [], 'image': 'docker-registry.default-tenant.app.yjb-3.iguazio-cd2.com:80/mlrun/mlrunlgb:latest', 'mode': '', 'volumes': [{'flexVolume': {'driver': 'v3io/fuse', 'options': {'accessKey': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d', 'container': 'users', 'subPath': '/admin'}}, 'name': 'v3io'}], 'volume_mounts': [{'mountPath': '/User', 'name': 'v3io'}], 'env': [{'name': 'V3IO_API', 'value': 'v3io-webapi.default-tenant.svc:8081'}, {'name': 'V3IO_USERNAME', 'value': 'admin'}, {'name': 'V3IO_ACCESS_KEY', 'value': '4a5eabdc-0814-489e-9fdf-6ad2fa5df31d'}], 'description': '', 'build': {'functionSourceCode': '', 'image': 'mlrun/mlrunlgb:latest', 'base_image': 'python:3.6-jessie', 'commands': ['pip install -U matplotlib sklearn lightgbm kfp joblib pyarrow', 'pip install mlrun']}}}
      - |-
        --out-path
      - |-
        /User/projects/lightgbm/models
      - ""
      "env":
      - "name": |-
          MLRUN_DBPATH
        "value": |-
          /User/mlrun
      - "name": |-
          V3IO_API
        "value": |-
          v3io-webapi.default-tenant.svc:8081
      - "name": |-
          V3IO_USERNAME
        "value": |-
          admin
      - "name": |-
          V3IO_ACCESS_KEY
        "value": |-
          4a5eabdc-0814-489e-9fdf-6ad2fa5df31d
      "image": |-
        mlrun/mlrun:latest
      "volumeMounts":
      - "mountPath": |-
          /User
        "name": |-
          v3io
    "inputs":
      "parameters":
      - "name": |-
          load-sample-preprocess-data-xtrain
      - "name": |-
          load-sample-preprocess-data-xvalid
      - "name": |-
          load-sample-preprocess-data-ytrain
      - "name": |-
          load-sample-preprocess-data-yvalid
    "name": |-
      train-model
    "outputs":
      "artifacts":
      - "name": |-
          mlpipeline-ui-metadata
        "path": |-
          /mlpipeline-ui-metadata.json
      - "name": |-
          mlpipeline-metrics
        "path": |-
          /mlpipeline-metrics.json
      - "name": |-
          train-model-model
        "path": |-
          /tmp/model
      "parameters":
      - "name": |-
          train-model-model
        "valueFrom":
          "path": |-
            /tmp/model
    "volumes":
    - "flexVolume":
        "driver": |-
          v3io/fuse
        "options":
          "accessKey": |-
            4a5eabdc-0814-489e-9fdf-6ad2fa5df31d
          "container": |-
            users
          "subPath": |-
            /admin
      "name": |-
        v3io
