kind: job
metadata:
  name: classifier-job
  tag: ''
  hash: 2b58d8429c60be12290a6152d38b3e94e7d62ae6
  project: ''
spec:
  description: ''
  build:
    functionSourceCode: 
    base_image: yjbds/mlrun-ds:latest
    commands: []
    code_origin: https://github.com/yjb-ds/demos.git#0313ab2d8e7278c37a0c6f96e2a05f746a8f1331:classifier_job.ipynb
